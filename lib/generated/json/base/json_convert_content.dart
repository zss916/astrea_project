// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

import 'package:astrea/net/bean/account_entity.dart';
import 'package:astrea/net/bean/analysis_article_entity.dart';
import 'package:astrea/net/bean/analysis_entity.dart';
import 'package:astrea/net/bean/analysis_identity_entity.dart';
import 'package:astrea/net/bean/auth_entity.dart';
import 'package:astrea/net/bean/base_response_entity.dart';
import 'package:astrea/net/bean/city_entity.dart';
import 'package:astrea/net/bean/country_entity.dart';
import 'package:astrea/net/bean/friend_entity.dart';
import 'package:astrea/net/bean/log_item_entity.dart';
import 'package:astrea/net/bean/natal_report_entity.dart';
import 'package:astrea/net/bean/star_item_entity.dart';
import 'package:astrea/net/bean/state_entity.dart';
import 'package:astrea/net/bean/upload_url_entity.dart';
// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler =
    void Function(Object error, StackTrace stackTrace);

extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(
    List<dynamic>? value, {
    EnumConvertFunction? enumConvert,
  }) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(
    dynamic value, {
    EnumConvertFunction? enumConvert,
  }) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(
    dynamic value, {
    EnumConvertFunction? enumConvert,
  }) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
          '$type unimplemented,you can try running the app again',
        );
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AccountEntity>[] is M) {
      return data
              .map<AccountEntity>(
                (Map<String, dynamic> e) => AccountEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AccountRights>[] is M) {
      return data
              .map<AccountRights>(
                (Map<String, dynamic> e) => AccountRights.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisArticleEntity>[] is M) {
      return data
              .map<AnalysisArticleEntity>(
                (Map<String, dynamic> e) => AnalysisArticleEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisArticleScores>[] is M) {
      return data
              .map<AnalysisArticleScores>(
                (Map<String, dynamic> e) => AnalysisArticleScores.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisArticleMeanings>[] is M) {
      return data
              .map<AnalysisArticleMeanings>(
                (Map<String, dynamic> e) => AnalysisArticleMeanings.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisEntity>[] is M) {
      return data
              .map<AnalysisEntity>(
                (Map<String, dynamic> e) => AnalysisEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisFirstFriendInfo>[] is M) {
      return data
              .map<AnalysisFirstFriendInfo>(
                (Map<String, dynamic> e) => AnalysisFirstFriendInfo.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisSecondFriendInfo>[] is M) {
      return data
              .map<AnalysisSecondFriendInfo>(
                (Map<String, dynamic> e) =>
                    AnalysisSecondFriendInfo.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AnalysisIdentityEntity>[] is M) {
      return data
              .map<AnalysisIdentityEntity>(
                (Map<String, dynamic> e) => AnalysisIdentityEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AuthEntity>[] is M) {
      return data
              .map<AuthEntity>(
                (Map<String, dynamic> e) => AuthEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<AuthRights>[] is M) {
      return data
              .map<AuthRights>(
                (Map<String, dynamic> e) => AuthRights.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<BaseResponseEntity>[] is M) {
      return data
              .map<BaseResponseEntity>(
                (Map<String, dynamic> e) => BaseResponseEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<BaseResponseData>[] is M) {
      return data
              .map<BaseResponseData>(
                (Map<String, dynamic> e) => BaseResponseData.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<CityEntity>[] is M) {
      return data
              .map<CityEntity>(
                (Map<String, dynamic> e) => CityEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<CountryEntity>[] is M) {
      return data
              .map<CountryEntity>(
                (Map<String, dynamic> e) => CountryEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<FriendEntity>[] is M) {
      return data
              .map<FriendEntity>(
                (Map<String, dynamic> e) => FriendEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<LogItemEntity>[] is M) {
      return data
              .map<LogItemEntity>(
                (Map<String, dynamic> e) => LogItemEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<LogItemFirstFriendInfo>[] is M) {
      return data
              .map<LogItemFirstFriendInfo>(
                (Map<String, dynamic> e) => LogItemFirstFriendInfo.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<LogItemSecondFriendInfo>[] is M) {
      return data
              .map<LogItemSecondFriendInfo>(
                (Map<String, dynamic> e) => LogItemSecondFriendInfo.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportEntity>[] is M) {
      return data
              .map<NatalReportEntity>(
                (Map<String, dynamic> e) => NatalReportEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartResult>[] is M) {
      return data
              .map<NatalReportNatalChartResult>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartResult.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReport>[] is M) {
      return data
              .map<NatalReportNatalChartReport>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReport.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportThreeMainStars>[] is M) {
      return data
              .map<NatalReportNatalChartReportThreeMainStars>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportThreeMainStars.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportThreeMainStarsSun>[] is M) {
      return data
              .map<NatalReportNatalChartReportThreeMainStarsSun>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportThreeMainStarsSun.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportThreeMainStarsMoon>[] is M) {
      return data
              .map<NatalReportNatalChartReportThreeMainStarsMoon>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportThreeMainStarsMoon.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportThreeMainStarsAscendant>[] is M) {
      return data
              .map<NatalReportNatalChartReportThreeMainStarsAscendant>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportThreeMainStarsAscendant.fromJson(
                      e,
                    ),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportPlanets>[] is M) {
      return data
              .map<NatalReportNatalChartReportPlanets>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportPlanets.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportPlanetsMercury>[] is M) {
      return data
              .map<NatalReportNatalChartReportPlanetsMercury>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportPlanetsMercury.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportPlanetsVenus>[] is M) {
      return data
              .map<NatalReportNatalChartReportPlanetsVenus>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportPlanetsVenus.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportPlanetsMars>[] is M) {
      return data
              .map<NatalReportNatalChartReportPlanetsMars>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportPlanetsMars.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportPlanetsJupiter>[] is M) {
      return data
              .map<NatalReportNatalChartReportPlanetsJupiter>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportPlanetsJupiter.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportPlanetsSaturn>[] is M) {
      return data
              .map<NatalReportNatalChartReportPlanetsSaturn>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportPlanetsSaturn.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportPlanetsUranus>[] is M) {
      return data
              .map<NatalReportNatalChartReportPlanetsUranus>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportPlanetsUranus.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportPlanetsNeptune>[] is M) {
      return data
              .map<NatalReportNatalChartReportPlanetsNeptune>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportPlanetsNeptune.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportNatalChartReportPlanetsPluto>[] is M) {
      return data
              .map<NatalReportNatalChartReportPlanetsPluto>(
                (Map<String, dynamic> e) =>
                    NatalReportNatalChartReportPlanetsPluto.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResult>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResult>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResult.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultYesterday>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultYesterday>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultYesterday.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultYesterdayScore>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultYesterdayScore>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultYesterdayScore.fromJson(
                      e,
                    ),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultToday>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultToday>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultToday.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultTodayScore>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultTodayScore>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultTodayScore.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultTomorrow>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultTomorrow>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultTomorrow.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultTomorrowScore>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultTomorrowScore>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultTomorrowScore.fromJson(
                      e,
                    ),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultWeek>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultWeek>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultWeek.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultMonth>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultMonth>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultMonth.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultMonthDecades>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultMonthDecades>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultMonthDecades.fromJson(
                      e,
                    ),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultYear>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultYear>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultYear.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<NatalReportPredicationAnalysisResultYearQuarters>[] is M) {
      return data
              .map<NatalReportPredicationAnalysisResultYearQuarters>(
                (Map<String, dynamic> e) =>
                    NatalReportPredicationAnalysisResultYearQuarters.fromJson(
                      e,
                    ),
              )
              .toList()
          as M;
    }
    if (<StarItemEntity>[] is M) {
      return data
              .map<StarItemEntity>(
                (Map<String, dynamic> e) => StarItemEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<StateEntity>[] is M) {
      return data
              .map<StateEntity>(
                (Map<String, dynamic> e) => StateEntity.fromJson(e),
              )
              .toList()
          as M;
    }
    if (<UploadUrlEntity>[] is M) {
      return data
              .map<UploadUrlEntity>(
                (Map<String, dynamic> e) => UploadUrlEntity.fromJson(e),
              )
              .toList()
          as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
        json.map((dynamic e) => e as Map<String, dynamic>).toList(),
      );
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AccountEntity).toString(): AccountEntity.fromJson,
    (AccountRights).toString(): AccountRights.fromJson,
    (AnalysisArticleEntity).toString(): AnalysisArticleEntity.fromJson,
    (AnalysisArticleScores).toString(): AnalysisArticleScores.fromJson,
    (AnalysisArticleMeanings).toString(): AnalysisArticleMeanings.fromJson,
    (AnalysisEntity).toString(): AnalysisEntity.fromJson,
    (AnalysisFirstFriendInfo).toString(): AnalysisFirstFriendInfo.fromJson,
    (AnalysisSecondFriendInfo).toString(): AnalysisSecondFriendInfo.fromJson,
    (AnalysisIdentityEntity).toString(): AnalysisIdentityEntity.fromJson,
    (AuthEntity).toString(): AuthEntity.fromJson,
    (AuthRights).toString(): AuthRights.fromJson,
    (BaseResponseEntity).toString(): BaseResponseEntity.fromJson,
    (BaseResponseData).toString(): BaseResponseData.fromJson,
    (CityEntity).toString(): CityEntity.fromJson,
    (CountryEntity).toString(): CountryEntity.fromJson,
    (FriendEntity).toString(): FriendEntity.fromJson,
    (LogItemEntity).toString(): LogItemEntity.fromJson,
    (LogItemFirstFriendInfo).toString(): LogItemFirstFriendInfo.fromJson,
    (LogItemSecondFriendInfo).toString(): LogItemSecondFriendInfo.fromJson,
    (NatalReportEntity).toString(): NatalReportEntity.fromJson,
    (NatalReportNatalChartResult).toString():
        NatalReportNatalChartResult.fromJson,
    (NatalReportNatalChartReport).toString():
        NatalReportNatalChartReport.fromJson,
    (NatalReportNatalChartReportThreeMainStars).toString():
        NatalReportNatalChartReportThreeMainStars.fromJson,
    (NatalReportNatalChartReportThreeMainStarsSun).toString():
        NatalReportNatalChartReportThreeMainStarsSun.fromJson,
    (NatalReportNatalChartReportThreeMainStarsMoon).toString():
        NatalReportNatalChartReportThreeMainStarsMoon.fromJson,
    (NatalReportNatalChartReportThreeMainStarsAscendant).toString():
        NatalReportNatalChartReportThreeMainStarsAscendant.fromJson,
    (NatalReportNatalChartReportPlanets).toString():
        NatalReportNatalChartReportPlanets.fromJson,
    (NatalReportNatalChartReportPlanetsMercury).toString():
        NatalReportNatalChartReportPlanetsMercury.fromJson,
    (NatalReportNatalChartReportPlanetsVenus).toString():
        NatalReportNatalChartReportPlanetsVenus.fromJson,
    (NatalReportNatalChartReportPlanetsMars).toString():
        NatalReportNatalChartReportPlanetsMars.fromJson,
    (NatalReportNatalChartReportPlanetsJupiter).toString():
        NatalReportNatalChartReportPlanetsJupiter.fromJson,
    (NatalReportNatalChartReportPlanetsSaturn).toString():
        NatalReportNatalChartReportPlanetsSaturn.fromJson,
    (NatalReportNatalChartReportPlanetsUranus).toString():
        NatalReportNatalChartReportPlanetsUranus.fromJson,
    (NatalReportNatalChartReportPlanetsNeptune).toString():
        NatalReportNatalChartReportPlanetsNeptune.fromJson,
    (NatalReportNatalChartReportPlanetsPluto).toString():
        NatalReportNatalChartReportPlanetsPluto.fromJson,
    (NatalReportPredicationAnalysisResult).toString():
        NatalReportPredicationAnalysisResult.fromJson,
    (NatalReportPredicationAnalysisResultYesterday).toString():
        NatalReportPredicationAnalysisResultYesterday.fromJson,
    (NatalReportPredicationAnalysisResultYesterdayScore).toString():
        NatalReportPredicationAnalysisResultYesterdayScore.fromJson,
    (NatalReportPredicationAnalysisResultToday).toString():
        NatalReportPredicationAnalysisResultToday.fromJson,
    (NatalReportPredicationAnalysisResultTodayScore).toString():
        NatalReportPredicationAnalysisResultTodayScore.fromJson,
    (NatalReportPredicationAnalysisResultTomorrow).toString():
        NatalReportPredicationAnalysisResultTomorrow.fromJson,
    (NatalReportPredicationAnalysisResultTomorrowScore).toString():
        NatalReportPredicationAnalysisResultTomorrowScore.fromJson,
    (NatalReportPredicationAnalysisResultWeek).toString():
        NatalReportPredicationAnalysisResultWeek.fromJson,
    (NatalReportPredicationAnalysisResultMonth).toString():
        NatalReportPredicationAnalysisResultMonth.fromJson,
    (NatalReportPredicationAnalysisResultMonthDecades).toString():
        NatalReportPredicationAnalysisResultMonthDecades.fromJson,
    (NatalReportPredicationAnalysisResultYear).toString():
        NatalReportPredicationAnalysisResultYear.fromJson,
    (NatalReportPredicationAnalysisResultYearQuarters).toString():
        NatalReportPredicationAnalysisResultYearQuarters.fromJson,
    (StarItemEntity).toString(): StarItemEntity.fromJson,
    (StateEntity).toString(): StateEntity.fromJson,
    (UploadUrlEntity).toString(): UploadUrlEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}
